1- It initializes a variable count to store the total number of coins used.
It sorts the coins list in descending order of their denominations,
ensuring that larger denomination coins are considered first.
It iterates through the sorted list of coins. For each coin denomination:
It calculates how many coins of this denomination can be used to make up the remaining amount (amount // coin).
It updates the remaining amount after using these coins (amount -= num_coins * coin).
It updates the total count of coins used (count += num_coins).
After iterating through all coin denominations, it returns the total count of coins used.

2- It sorts the activities based on their finish times using the bubble sort algorithm.
selected_activities: an empty list to store the activities that can be performed.
previous_finish_time: a variable to keep track of the finish time of the previously selected activity,
initialized to negative infinity.It iterates through the sorted list of activities. For each activity:
It extracts the start and finish times.
It checks if the start time of the current activity is greater than the finish time of the previously selected activity.
If so,it means that the current activity can be performed without overlapping with previously selected activities.
If the condition is met, it adds the current activity to the list of selected activities
and updates the previous_finish_time to the finish time of the current activity.
After iterating through all activities, it returns the length of the list of selected activities,
which represents the maximum number of non-overlapping activities that can be performed.

3-I initializes a variable max_reachable to keep track of the farthest index that can be reached from the curr position.
It iterates through the array. For each index i:
It checks if the current index i is beyond the max_reachable index.
If so, it means that it's not possible to reach the current index from any previous index, hence returns False. It
updates max_reachable to the maximum of its current value and the sum of the current index i and its jump length nums[i]
It checks if the max_reachable index reaches or exceeds the last index of the array.
If so, it means that it's possible to reach the end of the array, hence returns True. If the loop completes without
returning True, it means that it's not possible to reach the end of the array, hence False.

4- It calculates the value-to-weight ratio for each item and stores it along with the item's weight and value
in a list of tuples (value/weight, weight, value).
It sorts the list of items based on the value-to-weight ratio in descending order, items with higher
value-to-weight ratios appear first in the list.
total_value to keep track of the total value obtained by selecting items for the knapsack.
remaining_capacity to keep track of the remaining capacity of the knapsack.
It iterates through the sorted list of items. For each item:
If the remaining capacity of the knapsack is greater than or equal to the weight of the current item,
 the entire item is taken, and its value is added to the total value obtained.
If the remaining capacity is less than the weight of the current item,
a fraction of the item is taken such that it fits into the knapsack.
The fraction is determined by dividing the remaining capacity by the weight of the item.
The loop breaks when the knapsack capacity is exhausted.
Finally, it returns the total value obtained from the selected items, converted to an integer.

5- the min_platforms function sort times: It arranges the arrival and departure times of trains in ascending order.
It starts with one platform and keeps track of the maximum number of platforms needed.
It checks each arrival and departure time one by one.
If a train arrives before the current one departs, it means a new platform is needed.
It updates the count of platforms needed and the maximum count if necessary.
If a train departs before the next one arrives,
it means a platform is freed up, so it decreases the count of platforms needed.
Return Minimum Platforms: It returns the maximum count of platforms needed throughout the day.

6- max_activities function:
It arranges the activities based on their finish times, the earliest finishing activities come first.
It starts with an empty list to store selected activities and a variable to keep track of the previous finish time.
It goes through each activity in the sorted list.
If the start time of the current activity is greater than or equal to the previous finish time,
it means the current activity can be selected without overlapping with previously selected activities.
So, it adds the activity to the list of selected activities and updates the previous finish time to the finish time
of the current activity. It returns the count of selected activities,
which represents the maximum number of non-overlapping activities that can be performed.

7- max_activities_min_duration function: It arranges the activities by their finish times,the earliest finishing
activities come first. It starts with an empty list to store selected activities, a variable to keep track of the last
finish time, and another to calculate the total duration of selected activities.It goes through each activity in the
sorted list. If the start time of the current activity is greater than or equal to the last finish time,
it means the current activity doesn't overlap with previously selected activities. So, it adds the activity to the
list of selected activities, updates the last finish time to the finish time of the current activity,
and calculates the total duration by adding the difference between the finish and start times of the current activity.
It returns the count of selected activities, representing the maximum number of non-overlapping activities that can be
performed, and also the total duration of those activities.

8- The max_profit function calculates the maximum profit that can be obtained from buying and selling a stock,
given its prices over a period of time. Base Case: If there are no prices provided, the function returns 0.
It initializes variables min_price to store the minimum price seen so far and max_profit to store the maximum profit
that can be obtained.It iterates through each price in the list of prices.If the current price is lower than the
minimum price seen so far (min_price), it updates min_price to the current price.If the difference between
the current price and min_price is greater than the current max_profit, it updates max_profit to this difference.
It returns the maximum profit that can be obtained after iterating through all prices.
